---
## Author
author:
  name: Чамочумби Аксель
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Шаблон отчёта по лабораторной работе"
subtitle: "Простейший вариант"
license: "CC BY"
---

# Цель работы
 
 
Целью работы является изучение идеологии и применения средств контроля версий,
приобретение практических навыков по работе с системой контроля версий git.


# Выполнение лабораторной работы

1)Настройки git
Настроим git для правильной работы,после выведем список всех настроек,                 чтобы убедиться в том,что мы настроили все правильно.
    a. Добавим имя пользователя и почту, чтобы в коммитах
       было видно, кто именно сделал изменения. Без этого git
       не сможет нас иденцефетировать и дальнейшая работа
       будет невозможна.

![настройка имени и почты в git](image/1.png){#fig:1}

    b. Далее настраиваем правильный вывод данных.Эта
    настройка поможет нам избежать будущих проблем с
    чтением файлов, в которых находятся символы, которых 
    нет в ASCII таблице, например, русских букв.

![настройка для правильного отображения символов](image/2.png){#fig:2}

2) После этого называем ветку нашего первоначального репозитория, в которую будут коммитить все наши изменения. Она автоматически создаться после того как мы введем команду git init.

![настройка для предупреждения, если в файлах будут различаться переносы строк](image/3.png){#fig:3}

4) Далее настраиваем правильное форматирование перехода на следующую строку, так как на разных ОС реализация переноса сделана по разному. Например,в Windows используется -CRLF(использует два символа: /r/n), а для Linux/macOS - LF(использует один символ: /n).
Данная настройка заставит git предупреждать вас, если обнаружится несоответствие, которое может вызвать проблемы при совместной работе в разных ОС.

![вывод все настроек,которые мы произвели](image/4.png){#fig:4}

5) Создание ssh ключа:
Создадим SSH ключ и выведем файлы, потому что их у насбудет два. Открытый и Закрытый ключи. Именно открытый ключ мыпозже используем,чтобы работать с github по SSH, чтобы
убедиться в правильности наших действий.
	a. Введем команду для создания SSH ключа и добавим
	комментарий, в котором напишем имя, фамилию и почту.
	b. После ввода этой команды, терминал предложит нам выбрать,
	куда сохранить наш ключ,нажмем Enter, чтобы он сохранил его
	в директорию ./.ssh. После этого вводим пароль два раза,
	чтобы защитить наш ключ. И наши ключи созданы!
	![задаем пароль и расположение файла с ключами](image/5.png){#fig:5}

7) Выведем все наши файлы,чтобы убедиться в правильности наших действий.

![проверка на наличие созданных ключей](image/6.png){#fig:6}

8) Добавление SSH ключа в наши настройки github, чтобыработать c репозиторием.Перейдем на наш github, зайдем в настройки, назовем наш ключ - Title, добавим его и сохраним.
Переходим на наш github Заходим в настройки и нажимаем на кнопку SHH and GPG keys.

![в настройках профиля ищем кнопку для добавления SHH-ключа](image/7.png){#fig:7}

9) Заранее переходим в терминал и пишем команду, чтобы скопировать наш публичный SHH ключ и вставить его в поле для ключа

![команда для копирования публичного SHH-ключа](image/8.png){#fig:8}

10) Далее вводим название Title и вставляем наш ключ и нажимаем на кнопку ADD SSH KEY. И еще одно важное действие позади!

![нажав, как показано на рис. 3.2 нажимаем на кнопку new SSH key](image/9.png){#fig:9}

11) Создание репозитория
Перейдем по ссылке https://github.com/yamadharma/course-directory-student-template#,
создадим репозиторий, дав ему название, которое от нас просят и сделай коммиты.
	a. Переходим по ссылке, ищем кнопку USE THIS
	TEMPLATE, нажимаем на нее. Далее нажимаем на
	кнопку CREATE A NEW REPOSITORY.

![создаем репозиторий](image/10.png){#fig:10}

12) клонирование репозитория в нашу папку После всего этого мы переходим в терминал, переходим в каталог ~/work/study/2025-2026/Архитектура компьютера/ Ссылку на репозиторий, который мы будем клонировать можно найти на github, перейдя по самой первой ссылке https://github.com/yamadharma/course-directory-student-template Копируем именно SSH.
	a. Возвращаемся в терминал и пишем команду для
	клонирования репозитория в папку Архитектура
	компьютеров, которую мы создали на (рис. 4.1). После
	этого выведем содержимое папки и убедимся,что все
	сработало.
![клонирование репозитория в папку](image/11.png){#fig:11}

![убеждаемся в том, что репозиторий клонирован](image/12.png){#fig:12}

13)Использование главных команд add, commit, push Найдем файл COURSE, убедимся в том, что он пустой. После этого запишем в него COURSE make prepare и отправим изменение на github.
	a. Поиск в скопированном репозитории файла COURSE.

![поиск файла COURSE](image/13.png){#fig:13}

	b.Записываем в файл COURSE строчку COURSE make prepare.

![запись строчки в файл](image/14.png){#fig:14}

14)Добавляем все изменения с помощью команды (git add.), сохраняем все изменения с помощью команды (gitcommit), отправляем все сохраненные изменения на github c помощью команды (git push)

![добавление изменений, сохранение изменений и отправка на github](image/15.png){#fig:15}

# Выводы

**Вывод:**

В ходе работы была выполнена комплексная настройка Git и SSH для эффективной работы с системой контроля версий и платформой GitHub. 

**Основные этапы включали:**

1. **Базовая настройка Git** - установка имени пользователя, email и корректного отображения символов для идентификации авторов коммитов и предотвращения проблем с кодировкой.

2. **Конфигурация репозитория** - настройка основной ветки, форматирования переносов строк с учетом особенностей разных операционных систем, что обеспечивает корректную совместную работу в гетерогенной среде.

3. **Создание и настройка SSH-ключей** - генерация защищенной пары ключей (публичного и приватного) с последующей регистрацией публичного ключа в настройках GitHub для безопасного доступа к репозиториям.

4. **Работа с репозиторием** - создание репозитория из шаблона, его клонирование на локальную машину и освоение основного рабочего процесса Git: внесение изменений в файлы, их индексация (`git add`), фиксация (`git commit`) и отправка на сервер (`git push`).

Весь процесс продемонстрировал полный цикл подготовки рабочей среды для collaborative разработки с использованием современных инструментов контроля версий.
















